{"version":3,"sources":["claimController.js"],"names":["submitClaimRequest","req","res","_req$body","item_id","user_id","_ref","_ref2","result","regeneratorRuntime","async","_context","prev","next","body","reason","abrupt","status","json","error","awrap","db","query","sent","_slicedToArray","message","request_id","insertId","t0","console","stop","getMyClaims","_ref3","_ref4","rows","_context2"],"mappings":"guBAAO,IAAMA,mBAAqB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAV,EACOF,EAAIa,KAAjCV,EADsBD,EACtBC,QAASC,EADaF,EACbE,QADaF,EACJY,OAErBX,GAAYC,EAHa,CAAAM,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAIrBd,EAAIe,OAAO,KAAKC,KAAK,CAAEC,MAAO,0BAJT,KAAA,EAAA,OAAAR,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAW,MAQLC,GAAGC,MAAH,+GAGrB,CAAClB,EAASC,KAXgB,KAAA,EAAAC,EAAAK,EAAAY,KAAAhB,EAAAiB,eAAAlB,EAAA,GAQrBE,EARqBD,EAAA,GAc5BL,EAAIgB,KAAK,CAAEO,QAAS,UAAWC,WAAYlB,EAAOmB,WAdtBhB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAiB,GAAAjB,EAAA,MAAA,GAAAkB,QAAAV,MAAA,YAAAR,EAAAiB,IAiB5B1B,EAAIe,OAAO,KAAKC,KAAK,CAAEC,MAAO,UAjBF,KAAA,GAAA,IAAA,MAAA,OAAAR,EAAAmB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,qDAAA,IAAAC,YAAA,SAAA9B,EAAAC,GAAA,IAAAG,EAAA2B,EAAAC,EAAAC,EAAA,OAAAzB,mBAAAC,MAAA,SAAAyB,GAAA,OAAA,OAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,KAAA,EAAA,GAAAR,EAAAJ,EAAAqB,MAAAjB,QAAA,CAAA8B,EAAAtB,KAAA,EAAA,MAAA,OAAAsB,EAAAnB,OAAA,SAAAd,EAGzBE,OAAD,KAAaC,KAAAA,CAHac,MAAA,gBAAA,KAAA,EAAA,OAAAgB,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAAAJ,mBAAAW,MA4BPC,GAAGC,MAAH,8KA5BO,CAAAjB,KAAA,KAAA,EAAA2B,EAAAG,EAAAZ,KAAAU,EAAAT,eAAAQ,EAAA,GA4BrBE,EA5BqBD,EAAA,GAqC5B/B,EAAIgB,KAAKgB,GArCmBC,EAAAtB,KAAA,GAAA,MAAA,KAAA,GAAAsB,EAAAvB,KAAA,GAAAuB,EAAAP,GAAAO,EAAA,MAAA,GAAAN,QAAAV,MAAA,YAAAgB,EAAAP,IAAA1B,EAAAe,OAAA,KAAAC,KAAA,CAAAC,MAAA,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAgB,EAAAL,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"claimController.min.js","sourcesContent":["export const submitClaimRequest = async (req, res) => {\n    const { item_id, user_id, reason } = req.body;\n  \n    if (!item_id || !user_id) {\n      return res.status(400).json({ error: '缺少 item_id 或 user_id' });\n    }\n  \n    try {\n      const [result] = await db.query(\n        `INSERT INTO claim_request (item_id, user_id, status, request_date)\n         VALUES (?, ?, 'pending', NOW())`,\n        [item_id, user_id]\n      );\n  \n      res.json({ message: '認領申請已送出', request_id: result.insertId });\n    } catch (err) {\n      console.error('❌ 認領申請失敗:', err);\n      res.status(500).json({ error: '伺服器錯誤' });\n    }\n  };\n  export const getMyClaims = async (req, res) => {\n    const { user_id } = req.query;\n  \n    if (!user_id) {\n      return res.status(400).json({ error: '缺少 user_id' });\n    }\n  \n    try {\n      const [rows] = await db.query(\n        `SELECT c.*, i.item_name\n         FROM claim_request c\n         JOIN items i ON c.item_id = i.item_id\n         WHERE c.user_id = ?\n         ORDER BY c.request_date DESC`,\n        [user_id]\n      );\n  \n      res.json(rows);\n    } catch (err) {\n      console.error('❌ 查詢認領失敗:', err);\n      res.status(500).json({ error: '伺服器錯誤' });\n    }\n  };\n    "]}